"""
@author: Katherine Eaton

plague-phylogeography snakemake pipeline.

snakemake --cores 1 --configfile config/snakemake.yaml

"""

# -----------------------------------------------------------------------------#
#                             Modules and Packages                             #
# -----------------------------------------------------------------------------#
import os # Path manipulation

from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider
FTP = FTPRemoteProvider()
# Enforce minimum version
from snakemake.utils import min_version
min_version("5.26.1")

# -----------------------------------------------------------------------------#
#                                 Setup                                        #
# -----------------------------------------------------------------------------#

if not config:
    #print("ERROR: Please specify --configfile")
    #quit(1)
    print("WARNING: Using default configfile results/config/snakemake.yaml")
    configfile: os.path.join("results", "config", "snakemake.yaml")

# Pipeline directories
pipeline_dir = os.path.dirname(workflow.basedir)
project_dir = os.getcwd()
scripts_dir = os.path.join(pipeline_dir, "workflow", "scripts")
envs_dir = os.path.join(pipeline_dir, "workflow", "envs")
notebooks_dir = os.path.join(pipeline_dir, "workflow", "notebooks")
report_dir = os.path.join(pipeline_dir, "workflow", "report")
rules_dir = os.path.join(pipeline_dir, "workflow", "rules")

# Project directories
results_dir = os.path.join(project_dir, config["results_dir"])
logs_dir = os.path.join(results_dir, "logs")
config_dir = os.path.join(results_dir, "config")

# Sub snakefiles
include: rules_dir + "/download.smk"
include: rules_dir + "/alignment.smk"
include: rules_dir + "/phylogeny.smk"
include: rules_dir + "/qc.smk"
include: rules_dir + "/filter_mask.smk"
include: rules_dir + "/plot.smk"
include: rules_dir + "/metadata.smk"
include: rules_dir + "/functions.smk"
include: rules_dir + "/targets.smk"

# Report file
report: report_dir + "/workflow.rst"

# -----------------------------------------------------------------------------#
# Package Management                                                           #
# -----------------------------------------------------------------------------#
conda: os.path.join(pipeline_dir, "workflow/envs/main/main.yaml")
container: "docker://ktmeaton/plague-phylogeography"

# -----------------------------------------------------------------------------#
# Environment variables                                               #
# -----------------------------------------------------------------------------#
# Singularity
if workflow.singularity_prefix:
    os.environ["SINGULARITY_CACHEDIR"] =  workflow.singularity_prefix
    os.environ["NXF_SINGULARITY_CACHEDIR"] =  workflow.singularity_prefix
else:
    os.environ["SINGULARITY_CACHEDIR"] = os.path.join(pipeline_dir, ".snakemake", "singularity")
    os.environ["NXF_SINGULARITY_CACHEDIR"] = os.path.join(pipeline_dir, ".snakemake", "singularity")
# Conda
if workflow.conda_prefix:
    os.environ["CONDA_CACHEDIR"] =  workflow.conda_prefix
    os.environ["NXF_CONDA_CACHEDIR"] = workflow.conda_prefix
else:
    os.environ["CONDA_CACHEDIR"] = os.path.join(pipeline_dir, ".snakemake", "conda")
    os.environ["NXF_CONDA_CACHEDIR"] = os.path.join(pipeline_dir, ".snakemake", "conda")
# Locale settings for perl
if "LANGUAGE" not in os.environ:
    os.environ["LANGUAGE"] = "en_US.UTF-8"
if "LANG" not in os.environ:
    os.environ["LANG"] = "en_US.UTF-8"
if "LC_ALL" not in os.environ:
    os.environ["LC_ALL"] = "en_US.UTF-8"

# -----------------------------------------------------------------------------#
# Local rules                                                                  #
# -----------------------------------------------------------------------------#
# Rule that need internet access will be localrules
localrules:
    download_assembly, download_sra

wildcard_constraints:
    reads_origin="(all|assembly|sra|local)",
    missing_data="([0-9]*)",
    locus_name="([A-Z,a-z]*)",

# -----------------------------------------------------------------------------#
# Main Target                                                                  #
# -----------------------------------------------------------------------------#

rule all:
    """
    The default pipeline targets.
    """
    input:
        # Metadata
        metadata_all_input,
        # Multiqc
        #multiqc_all_input,
        # Phylo
        iqtree_all_input,
        # Post-Phylo
        lsd_all_input,
        #clock_plot_all_input,
        #mugration_plot_all_input,
        #geo_all_input,
        # Plot
        plot_missing_data_all_input,
        plot_snp_matrix_all_input,
        # Stats
        locus_coverage_collect_all_input,

# -----------------------------------------------------------------------------#
#                             Help and Usage                                   #
# -----------------------------------------------------------------------------#

rule help:
  """
  Print list of all targets with help.
  """
  run:
    for rule in workflow.rules:
      print("-" * 80)
      print("rule: ", rule.name )
      if rule.docstring:
          print(rule.docstring)
      if rule._input:
          print("\tinput:")
          for in_file in rule.input:
              print("\t\t" + str(in_file))
          for in_file in rule.input.keys():
              print("\t\t" + in_file + ": " + str(rule.input[in_file]))
      if rule._output:
          print("\toutput:")
          for out_file in rule.output:
              print("\t\t" + out_file)
          for out_file in rule.output.keys():
              print("\t\t" + out_file + ": " + str(rule.output[out_file]))
      if rule._params:
          print("\tparams:")
          for param in rule.params.keys():
              print("\t\t" + param + ": " + str(rule.params[param]))
      if rule.resources:
          print("\tresources:")
          for resource in rule.resources.keys():
              print("\t\t" + resource.strip("_") + ": " + str(rule.resources[resource]))
      if rule.conda_env:
          print("\t\tconda: ", rule.conda_env)
      if rule._log:
          print("\t\tlog: ", rule._log)
