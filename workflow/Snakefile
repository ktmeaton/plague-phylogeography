"""
@author: Katherine Eaton

plague-phylogeography snakemake pipeline.

snakemake --cores 1 --configfile config/snakemake.yaml

"""

# -----------------------------------------------------------------------------#
#                             Modules and Packages                             #
# -----------------------------------------------------------------------------#
import os # Path manipulation

from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider
FTP = FTPRemoteProvider()

# -----------------------------------------------------------------------------#
#                                 Setup                                        #
# -----------------------------------------------------------------------------#

project_dir = os.path.dirname(workflow.basedir)
results_dir = os.path.join(project_dir, "results")
scripts_dir = os.path.join(project_dir, "workflow", "scripts")
envs_dir = os.path.join(project_dir, "workflow", "envs")
logs_dir = os.path.join(project_dir, "workflow", "logs")
report_dir = os.path.join(project_dir, "workflow", "report")


# Include the config file
configfile: os.path.join(project_dir, "config", "snakemake.yaml")

db_path = os.path.join(results_dir, "sqlite_db", config["sqlite_db"])

# Sub snakefiles
include: "rules/sqlite_import.smk"
include: "rules/download.smk"
include: "rules/alignment.smk"
include: "rules/phylogeny.smk"
include: "rules/functions.smk"

# Report file
report: "report/workflow.rst"

# -----------------------------------------------------------------------------#
#                                Main Target                                   #
# -----------------------------------------------------------------------------#

rule all:
    """
    The default pipeline target.
    """
    input:
        #---Database Import---#
        #results_dir + "/sqlite_import/download_reference.txt",
        #results_dir + "/sqlite_import/download_assembly.txt",
        #results_dir + "/sqlite_import/eager_sra.tsv",
        #---Data Download---#
        #download_fna_output,
        #download_ref_output,
        #download_sra_output,
        #---Alignment---#
        #eager_sra_output2,
        #snippy_pairwise_fna_output,
        #results_dir + "/snippy_multi/snippy-core.txt"
        # IQTREE
        iqtree_output

# -----------------------------------------------------------------------------#
#                             Help and Usage                                   #
# -----------------------------------------------------------------------------#

rule help:
  """
  Print list of all targets with help.
  """
  run:
    for rule in workflow.rules:
      print("-" * 80)
      print("rule: ", rule.name )
      print(rule.docstring )
      # Rule Inputs
      if rule._input:
          print("\tinput:")
          for in_file in rule.input:
              print("\t\t" + in_file)
          for in_file in rule.input.keys():
              print("\t\t" + in_file + ": " + str(rule.input[in_file]))
      if rule._output:
          print("\toutput:")
          for out_file in rule.output:
              print("\t\t" + out_file)
          for out_file in rule.output.keys():
              print("\t\t" + out_file + ": " + str(rule.output[out_file]))
      if rule._params:
          print("\tparams:")
          for param in rule.params.keys():
              print("\t\t" + param + ": " + str(rule.params[param]))
      if rule.resources:
          print("\tresources:")
          for resource in rule.resources.keys():
              print("\t\t" + resource.strip("_") + ": " + str(rule.resources[resource]))
      if rule.conda_env:
          print("\t\tconda: ", rule.conda_env)
      if rule._log:
          print("\t\tlog: ", rule._log)
      #print(rule.conda_env)
