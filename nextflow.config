/*
 * -------------------------------------------------
 *  Plague Pipeline NextFlow Config File
 * -------------------------------------------------
 * Default Configuration options
 */

// Global Default Parameters
params{
  version = false
  help = false


  // Output directory default
  outdir = "results"

  // Scripts directory
  scriptdir = "$baseDir/scripts"

  // Trace files directory
  tracedir = "${params.outdir}/trace"

  // Path to ncbimeta yaml config and db
  ncbimeta_create = false
  ncbimeta_update = false
  ncbimeta_annot = false
  //sqlite = false
  // Default sqlite database for yersinia pestis
  sqlite = "$baseDir/results/ncbimeta_db/update/latest/output/database/yersinia_pestis_db.sqlite"

  // Skip processes
  skip_ncbimeta_db_create = false
  skip_ncbimeta_db_update = false
  skip_sqlite_import = false
  skip_assembly_download = false
  skip_sra_download = false
  skip_eager = false
  skip_reference_download = false
  skip_outgroup_download = false
  skip_snippy_pairwise = false
  skip_snippy_variant_summary = false
  skip_snippy_variant_summary_collect = false
  skip_snippy_detect_snp_high_density = false
  skip_snippy_merge_mask_bed = false
  skip_reference_detect_repeats = false
  skip_reference_detect_low_complexity = false
  skip_snippy_multi = false
  skip_snippy_multi_filter = false
  skip_modeltest = false
  skip_iqtree = false
  skip_nextstrain_metadata = false
  skip_qualimap_snippy_pairwise = false
  skip_multiqc = false

  // Enable process
  treetime = false

  // Other to be sorted
  max_datasets_assembly = 100
  max_datasets_sra = 100

  // NCBImetaJoin First Parameters
  ncbimeta_join_first_final = "MasterFirst"
  ncbimeta_join_first_uniq = "'BioSampleAccession BioSampleAccessionSecondary BioSampleSRAAccession'"
  ncbimeta_join_first_accessory = "'Assembly SRA Nucleotide'"
  ncbimeta_join_first_anchor = "BioSample"

  // NCBImetaJoin Second Parameters
  ncbimeta_join_second_final = "MasterSecond"
  ncbimeta_join_second_uniq = "'BioSampleAccession BioSampleBioProjectAccession'"
  ncbimeta_join_second_accessory = "'BioProject'"
  ncbimeta_join_second_anchor = "MasterFirst"

  // NCBImetaJoin Third Parameters
  ncbimeta_join_third_final = "Master"
  ncbimeta_join_third_uniq = "'BioSampleAccession BioProjectPublicationID'"
  ncbimeta_join_third_accessory = "'Pubmed'"
  ncbimeta_join_third_anchor = "MasterSecond"

  // NCBImeta parameters
  ncbimeta_output_dir = "output"
  ncbimeta_sqlite_db = "yersinia_pestis_db.sqlite"
  ncbimeta_sqlite_db_latest = "${params.outdir}/ncbimeta_db/update/latest/${params.ncbimeta_output_dir}/database/${params.ncbimeta_sqlite_db}"

  // NCBImetaAnnotate parameters
  ncbimeta_annot_table = "BioSample"

  // EAGER parameters
  eager_organism = "\"Yersinia pestis\""

  eager_tsv = "metadata_sra_eager.tsv"
  eager_rev = "7b51863957"
  sra_tsv = "metadata_sra_acc.tsv"
  eager_clip_readlength = 35
  eager_bwaalnn = 0.01
  eager_bwaalnl = 16

  // Genbank and assembly
  genbank_assembly_gz_suffix = "_genomic.fna.gz"
  genbank_assembly_fna_suffix = "_genomic.fna"
  file_assembly_download_ftp = "assembly_download.txt"
  file_sra_download_acc = "sra_download.txt"
  reference_genome_fna_ftp = "ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/009/065/GCF_000009065.1_ASM906v1/GCF_000009065.1_ASM906v1_genomic.fna.gz"
  reference_genome_gb_ftp = "ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/009/065/GCF_000009065.1_ASM906v1/GCF_000009065.1_ASM906v1_genomic.gbff.gz"
  reference_genome_gff_ftp = "ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/009/065/GCF_000009065.1_ASM906v1/GCF_000009065.1_ASM906v1_genomic.gff.gz"

  outgroup_genome_fna_ftp = ["ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/798/285/GCA_003798285.1_ASM379828v1/GCA_003798285.1_ASM379828v1_genomic.fna.gz",
                             "ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/834/295/GCA_000834295.1_ASM83429v1/GCA_000834295.1_ASM83429v1_genomic.fna.gz"]

  // Snippy Parameters
  snippy_ctg_depth = 10
  snippy_bam_depth = 3
  snippy_map_qual = 30
  snippy_min_frac = 0.9
  snippy_base_qual = 20
  snippy_mask_char = 'X'
  snippy_bam = false

  // SnpEff Parameters
  //snpeff_db = 'Yersinia_pestis_co92'

  // Snippy summary files
  snippy_variant_summary = "snippy_variant_summary"

  // Snippy filtering
  snippy_snp_density_window = 10
  snippy_variant_density = "snippy_variant_density"
  snippy_multi_missing_data = 0.00
  snippy_multi_missing_data_text = 0

  // IQTREE Parameters
  // Default to reference
  iqtree_outgroup = "Reference"
  // Could be manually specified, and/or multi
  //iqtree_outgroup = "Sample1,Sample2"
  iqtree_branch_support = false
  iqtree_ufboot = 1000
  iqtree_alrt = 1000
  iqtree_runs = 1

  // SQLite query
  sqlite_select_command_asm = "\'SELECT AssemblyFTPGenbank FROM Master WHERE BioSampleComment LIKE \"%KEEP%\"\'"
  //sqlite_select_command_asm = "\"SELECT AssemblyFTPGenbank FROM Master WHERE (BioSampleComment NOT LIKE \'%REMOVE%\') AND (TRIM(BioSampleHost) > \'\') AND (TRIM(LOWER(BioSampleHost)) IS NOT \'missing\') AND (TRIM(BioSampleCollectionDate) > \'\') AND (TRIM(LOWER(BioSampleCollectionDate)) IS NOT \'missing\' AND TRIM(LOWER(BioSampleCollectionDate)) IS NOT \'not applicable\' AND TRIM(LOWER(BioSampleCollectionDate)) IS NOT \'unknown\' AND TRIM(LOWER(BioSampleCollectionDate)) IS NOT \'n/a\' ) AND (TRIM(BioSampleGeographicLocation) > '') AND (TRIM(LOWER(BioSampleCollectionDate)) IS NOT \'missing\') AND (TRIM(LOWER(BioSampleCollectionDate)) IS NOT \'missing\') AND (TRIM(AssemblyFTPGenbank) > \'\') \""
  sqlite_select_command_sra = "\"SELECT BioSampleAccession,SRARunAccession, SRALibraryLayout,SRAFileURL From Master WHERE ( BioSampleComment LIKE \'%EAGER%\')\""
  // MultiQC
  multiqc_config = "$baseDir/config/multiqc_config_phylo.yaml"

  // Sys resource defaults only, expecting to be overwritten
  max_memory = 6.GB
  max_cpus = 2
  max_time = 4.h
}

// --------------------------------------
// Workflow Execution Reports and Tracing
// --------------------------------------

timeline {
  enabled = true
  file = "${params.tracedir}/timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline.pdf"
}

// --------------------------------------
// Manifest and publishing
// --------------------------------------

manifest {
  name = 'Plague Phylogeography'
  author = 'Katherine Eaton'
  homePage = 'https://github.com/ktmeaton/paper-phylogeography'
  version = '0.1.4'
  description = 'Plague Phylogeography Nextflow Pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
}

// --------------------------------------
// Ensure resource requirements don't go beyond a maximum limit.
// From nf-core/eager
// --------------------------------------

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
// --------------------------------------

// --------------------------------------
// Process
// --------------------------------------

process{
  // Default minimal resources
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 6.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  // Multi core, run 2 simultaneously
  withName:snippy_pairwise{
    cpus = Math.max(1, Math.floor(params.max_cpus / 2 ))
    maxForks = Math.min(2, params.max_cpus)
  }
  // Multi core, run 2 simultaneously
  withName:iqtree{
    cpus = params.max_cpus
    maxForks = 1
  }
  withName:eager{
    cpus = params.max_cpus
    maxForks = 1
  }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'
}

// --------------------------------------
// Executor
// --------------------------------------

executor{
  name = 'local'
  queueSize = params.max_cpus
}
