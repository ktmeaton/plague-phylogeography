#------------------------------------------------------------------------------#
name: Pipeline
#------------------------------------------------------------------------------#
# Global workflow environment variables
env:
    CONDA_ENVS_PATH: "/home/runner/miniconda/envs:/usr/share/miniconda/envs"
    CONDA_PKGS_DIRS: "/home/runner/miniconda/pkgs"
    TEST_DOWNLOAD: "test_download_reference test_download_assembly test_download_sra test_download_gff test_download_gbff"
    TEST_EAGER: "test_eager_local test_eager_sra"
    TEST_SNIPPY: "test_snippy_pairwise_assembly test_snippy_pairwise_sra test_snippy_pairwise_local"
    TEST_SNIPPY_MULTI: "test_snippy_multi test_snippy_multi_filter"
    TEST_PHYLOGENY: "test_iqtree"
    TEST_QC: "test_multiqc"
#------------------------------------------------------------------------------#
# Workflow conditions
on:
  push:
    branches:
      - '*'
    paths:
      - '.github/workflows/pipeline.yaml'
      - 'workflow/Snakefile'
      - 'workflow/rules/*.smk'
      - 'workflow/envs/*/*.yaml'
      - 'workflow/envs/*/Dockerfile'
      - 'workflow/scripts/*'
      - 'results/sqlite_db/*'
  pull_request:
    branches:
      - '*'
  release:
    types: [published]
#------------------------------------------------------------------------------#
jobs:
  #----------------------------------------------------------------------------#
  # Install dependencies
  pipeline :
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container_mode: ["--use-conda","--use-singularity --singularity-prefix /home/runner/work/plague-phylogeography/plague-phylogeography/.snakemake/singularity/"]
      # Don't cancel a matrix job if another job fails
      fail-fast: false
    timeout-minutes: 120
    steps:
      #------------------------------------------------------------------------#
      # Checkout Repository
      - name: checkout repo
        uses: actions/checkout@v2
      # Setup python
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      # Setup snakemake
      - name: setup snakemake
        run: pip install snakemake==5.26.0 ftputil==4.0.0
      #------------------------------------------------------------------------#
      # Setup conda with mamba
      - name: setup conda
        uses: goanpeca/setup-miniconda@v1
        with:
          auto-update-conda: true
          mamba-version: "*"
          channels: conda-forge
      # Setup singularity
      - name: setup singularity
        uses: eWaterCycle/setup-singularity@v3
        with:
          singularity-version: 3.6.3
      # install pipeline container
      - name: install container
        run: |
          snakemake --profile profiles/gh-actions ${{ matrix.container }} test_container;
      #------------------------------------------------------------------------#
      # Test Data Download
      - name: test download
        shell: bash -l {0}
        run:
          snakemake --profile profiles/gh-actions ${{ matrix.container }} ${TEST_DOWNLOAD};
      # Test Eager
      - name: test eager
        shell: bash -l {0}
        run:
          snakemake --profile profiles/gh-actions ${{ matrix.container }} ${TEST_EAGER};
      # Test snippy
      - name: test snippy pairwise
        shell: bash -l {0}
        run:
          snakemake --profile profiles/gh-actions ${{ matrix.container }} ${TEST_SNIPPY};
      # Test snippy
      - name: test merge snp density
        shell: bash -l {0}
        run:
          snakemake --profile profiles/gh-actions ${{ matrix.container }} merge_snp_density;
      # Test snippy multi
      - name: test snippy multi
        shell: bash -l {0}
        run:
          snakemake --profile profiles/gh-actions ${{ matrix.container }} ${TEST_SNIPPY_MULTI};
      # Test IQTREE
      - name: test iqtree
        shell: bash -l {0}
        run:
          snakemake --profile profiles/gh-actions ${{ matrix.container }} ${TEST_PHYLOGENY};
      # Test IQTREE
      - name: test multiqc
        shell: bash -l {0}
        run:
          snakemake --profile profiles/gh-actions ${{ matrix.container }} ${TEST_QC};
      # Test wrapup with all
      - name: test all
        shell: bash -l {0}
        run:
          snakemake --profile profiles/gh-actions ${{ matrix.container }} all;
      # Test Report Generation
      - name: test report
        shell: bash -l {0}
        run:
          snakemake --profile profiles/gh-actions ${{ matrix.container }} --report workflow/report/report.html all;
      #------------------------------------------------------------------------#
      #  Artifact Upload Report
      - name: artifact report
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: workflow/report/report.html
      #  Artifact Upload logs
      - name: artifact logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: workflow/logs/
